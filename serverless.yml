# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: manager-classifier
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-ruby-layer

custom:
  bucket: ${opt:stage}-${env:BUCKET}
  log_group_name: ${opt:stage}-${env:APP_NAME}

provider:
  name: aws
  runtime: ruby3.2
  profile: ${env:PROFILE} # this is my aws named credential in ~/.aws/credentials
  region: ${env:REGION}
  environment:
    STAGE: ${opt:stage}
    REGION: ${env:REGION}
    APP_NAME: 'manager-classifier'
    LOG_GROUP_NAME: ${self:custom.log_group_name}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ManagerClassifierBucket" } ] ]  }
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - "Ref" : "ManagerClassifierBucket"
                - "/*"
        - Effect: "Allow"
          Action:
            - "logs:PutLogEvents"
          Resource:
            - ${env:LOG_GROUP_ARN}


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.rb'
#    - '!exclude-me-dir/**'
#    - include-me.rb
#    - include-me-dir/**

functions:
  classifier:
    handler: functions/classifier/handler.ManagerClassifier::Functions::Classifier.handle
    events:
      - httpApi:
          path: /classifier
          method: post
  
  notifier:
    handler: functions/notifier/handler.ManagerClassifier::Functions::Notifier.handle
    events:
      - s3:
          bucket: # this will create the bucklet for us
            Ref: ManagerClassifierBucket
          existing: true
          event: s3:ObjectCreated:*
    environment:
      BUCKET: ${self:custom.bucket}
      CLASSIFIER_URI: ${env:CLASSIFIER_URI}
      CLASSIFIER_PATH: ${env:CLASSIFIER_PATH}
      SLACK_URI: ${env:SLACK_URI}
      SLACK_PATH: ${env:SLACK_PATH}
          


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ManagerClassifierBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
